 public List<Integer> postorderTraversal(TreeNode root) {
        // First create a result list to return
        List<Integer> res = new ArrayList<>();
        // If tree is empty return the list
        if(root == null)return res;
        // Create Stack to store the tree nodes just to pre-order traversal as
        // Stack is based on last in first out principle
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        // Iterate the stack until it is empty
        while(!stack.isEmpty()){
            // pop out from the stack and first add it to the traversal list
            TreeNode temp = stack.pop();
             result.add(0, node.val);  // Add to front instead of end
            // Push left first, then right (so right processed before left)

            if(temp.left!=null) stack.push(temp.left);
            if(temp.right!=null)stack.push(temp.right);
        }
        return res;   
    }
