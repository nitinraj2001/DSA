class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        return isIdentical(p,q);
    }

    public boolean isIdentical(TreeNode p, TreeNode q){
        // if both nodes are null it means it's extreem bottom return true
        if(p==null && q==null)return true;
        // If either of one node is null it means it's not identical return false
        if(p==null || q==null) return false;
        // Now check rest 3 conditions 
        // 1. Check the value of both nodes it should be same
        // 2. Check the left subtree of first binary tree should be same to left subtree of second binary tree
        // 3. Check the right subtree of sfirst binary tree should be same to right subtree of second binary tree
        return (p.val==q.val)&&isIdentical(p.left,q.left)&&isIdentical(p.right,q.right);
    }
}
