/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        // add cornor case in case there is only single node
        if(head.next==null){
            head=null;
            return head;
        }
        ListNode currentNode = head;
        ListNode previousNode = null;
        ListNode currentHead=head;
        int mid = countLength(head)/2;
        for(int i=0;i<mid&currentNode.next!=null;i++){
            previousNode = currentNode;
            currentNode = currentNode.next;
        }
        if(currentNode.next!=null){
          previousNode.next=currentNode.next;
        }
        else{
            previousNode.next=null;
        }
        return currentHead;
        
    }

    private int countLength(ListNode head){
        // Assign the head node to the current node and set count to 0
        ListNode currentNode = head;
        int count = 0;
        while(currentNode!=null){
            count=count+1;
            currentNode=currentNode.next;
        }
        return count;
    }
}
