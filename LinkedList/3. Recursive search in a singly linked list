import java.util.Scanner;

public class LinkedList {

        // Linked list must have a head which represents its start Node
        static Node head=null;

        // Create a static Node class which is used as a reference to other nodes of linked list
        static class Node{
            int data;
            Node next;

            Node(int data){
                this.data=data;
            }
        }

        //create a method to insert values in the linked list
        public static LinkedList insert(LinkedList list, int data){
            // First create a new node which is to be inserted in the linked list
            Node newNode = new Node(data);
            //check if the head node of the linked list is set to null then assign newNode to head
            if(list.head==null){
                head=newNode;
                return list;
            }
            // if head is not null then iterate the list and insert the data at the end
            Node last = list.head;
            while(last.next!=null){
                last=last.next;
            }
            // once the last node is found then add newNode in last node next
            last.next=newNode;
            // return the list
            return list;
        }

        public static void printLinkedList(LinkedList list){
            Node currentNode = list.head;
            while(currentNode.next!=null){
                System.out.print(currentNode.data + " ");
                currentNode=currentNode.next;
            }
            System.out.println(currentNode.data);
        }

        public static void main(String[] args) {

            LinkedList list = new LinkedList();

            Scanner sc = new Scanner(System.in);
            System.out.println("Enter total nodes to be in linked list");
            int count= sc.nextInt();
            for(int i=0;i<count;i++){
                System.out.println("Enter the data to be inserted");
                int data=sc.nextInt();
                // insert the data into the list
                insert(list,data);
            }
            // print the linked list data
            printLinkedList(list);
            // ask user which data is to be search in linked list
            System.out.println("Enter the data to be search in the list");
            int search_data = sc.nextInt();
            //int result=iterative_search_in_list(list,search_data);
            boolean result=recursive_search_in_list(list.head,search_data);
            if(result)System.out.println("Data "+search_data+" is found in the list");
            else System.out.println("Data "+search_data+" is not found in the list");

        }

    private static int iterative_search_in_list(LinkedList list, int search_data) {
            // start from head node and iterate each node as soon data is found return the data else return -1
            Node current_node = list.head;
            while(current_node!=null){
                if(current_node.data==search_data)return 1;
                else current_node=current_node.next;
            }
            return -1;
    }

    private static boolean recursive_search_in_list(Node current_node, int search_data){
            // base condition
            if(current_node==null) return false;
            else if(current_node.data==search_data) return true;
            return recursive_search_in_list(current_node.next,search_data);
    }

}
